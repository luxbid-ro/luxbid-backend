// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  
  // Tip persoană
  personType    PersonType
  
  // Pentru persoane fizice
  firstName     String?
  lastName      String?
  cnp           String?
  
  // Pentru persoane juridice
  companyName   String?
  cui           String?
  regCom        String?
  
  // Date comune
  phone         String
  
  // Adresa de facturare
  address       String
  city          String
  county        String
  postalCode    String
  country       String   @default("România")
  
  // Status fields
  isVerified    Boolean  @default(false)
  isAdmin       Boolean  @default(false)
  
  // Email verification
  emailVerificationCode     String?
  emailVerificationExpires  DateTime?
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relații
  listings      Listing[]
  offers        Offer[]
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("users")
}

model Listing {
  id            String   @id @default(cuid())
  title         String
  description   String
  category      String
  price         Float
  currency      String   @default("RON")
  condition     String
  brand         String?
  model         String?
  year          Int?
  
  // New fields for enhanced listings
  hasDocuments  String?  // "Cu acte" or "Fără acte"
  material      String?  // For watches: "Oțel", "Aur", etc.
  
  // Status
  status        ListingStatus @default(ACTIVE)
  
  // Media
  images        String[]
  
  // Location
  location      String
  
  // Relationships
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offers        Offer[]
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("listings")
}

model Offer {
  id            String   @id @default(cuid())
  amount        Float
  currency      String   @default("RON")
  message       String?
  
  // Status
  status        OfferStatus @default(PENDING)
  
  // Relationships
  listingId     String
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("offers")
}

model Message {
  id            String   @id @default(cuid())
  content       String
  
  // Relationships
  senderId      String
  sender        User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId    String
  receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  offerId       String
  offer         Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt     DateTime @default(now())

  @@map("messages")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  
  @@map("password_reset_tokens")
}

enum PersonType {
  FIZICA
  JURIDICA
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  REMOVED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
